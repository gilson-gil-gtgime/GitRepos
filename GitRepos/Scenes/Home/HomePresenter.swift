//
//  HomePresenter.swift
//  GitRepos
//
//  Created by Gilson Gil on 23/03/19.
//  Copyright (c) 2019 Gilson Gil. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomePresentationLogic {
  func presentRepositories(response: Home.FetchRepositories.Response)
  func presentError(response: Home.DisplayError.Response)
}

final class HomePresenter: HomePresentationLogic {
  weak var viewController: HomeDisplayLogic?

  // MARK: - Present Repositories

  func presentRepositories(response: Home.FetchRepositories.Response) {
    let displayedRepositories = response.repositories.compactMap(convertRepository)
    let viewModel = Home.FetchRepositories.ViewModel(displayedRepositories: displayedRepositories)
    viewController?.displayRepositories(viewModel: viewModel)
  }

  private func convertRepository(_ repository: Repository) -> Home.DisplayedRepository {
    return Home.DisplayedRepository(name: repository.name,
                                    stars: String(describing: repository.stars),
                                    authorName: repository.owner.name,
                                    authorAvatarUrl: repository.owner.avatarUrl)
  }

  // MARK: - Present Error

  func presentError(response: Home.DisplayError.Response) {
    let message: String
    switch response.error {
    case let localized as LocalizedError:
      message = localized.errorDescription ?? localized.localizedDescription
    default:
      message = response.error.localizedDescription
    }
    let viewModel = Home.DisplayError.ViewModel(message: message)
    viewController?.displayError(viewModel: viewModel)
  }
}
