//
//  HomeViewController.swift
//  GitRepos
//
//  Created by Gilson Gil on 23/03/19.
//  Copyright (c) 2019 Gilson Gil. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeDisplayLogic: class {
  func displayRepositories(viewModel: Home.FetchRepositories.ViewModel)
  func displayError(viewModel: Home.DisplayError.ViewModel)
}

final class HomeViewController: UIViewController {
  var interactor: HomeBusinessLogic?
  var homeView: HomeViewLogic?
  var displayedRepositories: [Home.DisplayedRepository]?

  override var preferredStatusBarStyle: UIStatusBarStyle { return .lightContent }

  // MARK: - Object lifecycle

  init() {
    super.init(nibName: nil, bundle: nil)
    setup()
  }

  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }

  // MARK: - Setup

  private func setup() {
    let viewController = self
    let interactor = HomeInteractor()
    let presenter = HomePresenter()
    viewController.interactor = interactor
    interactor.presenter = presenter
    presenter.viewController = viewController
  }

  private func setupTableView() {
    homeView?.tableView.register(HomeRepositoryCell.self, forCellReuseIdentifier: HomeRepositoryCell.reuseIdentifier)
    homeView?.tableView.dataSource = self
    homeView?.tableView.delegate = self
  }

  // MARK: - View lifecycle

  override func loadView() {
    let homeView = HomeView()
    self.homeView = homeView
    self.view = homeView
  }

  override func viewDidLoad() {
    super.viewDidLoad()
    setupTableView()
    fetchNextPage()
  }
  
  // MARK: - Fetch Next Page
  
  func fetchNextPage() {
    let request = Home.FetchRepositories.Request()
    interactor?.fetchNextPage(request: request)
  }
}

// MARK: - HomeDisplayLogic
extension HomeViewController: HomeDisplayLogic {
  func displayRepositories(viewModel: Home.FetchRepositories.ViewModel) {
    DispatchQueue.main.async {
      self.displayedRepositories = viewModel.displayedRepositories
      self.homeView?.tableView.reloadData()
    }
  }

  func displayError(viewModel: Home.DisplayError.ViewModel) {
    DispatchQueue.main.async {
      let alert = UIAlertController(title: nil, message: viewModel.message, preferredStyle: .alert)
      let cancel = UIAlertAction(title: String.Home.cancel, style: .default, handler: nil)
      alert.addAction(cancel)
      self.present(alert, animated: true, completion: nil)
    }
  }
}

// MARK: - UITableView DataSource
extension HomeViewController: UITableViewDataSource {
  func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    return displayedRepositories?.count ?? 0
  }

  func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    let cell = tableView.dequeueReusableCell(withIdentifier: HomeRepositoryCell.reuseIdentifier, for: indexPath)
    if let repositoryCell = cell as? HomeRepositoryCellLogic, let repository = displayedRepositories?[indexPath.row] {
      repositoryCell.update(with: repository)
    }
    return cell
  }
}

// MARK: - UITableView Delegate
extension HomeViewController: UITableViewDelegate {}

// MARK: - UIScrollView Delegate
extension HomeViewController: UIScrollViewDelegate {
  func scrollViewDidScroll(_ scrollView: UIScrollView) {
    let closeToEnd = scrollView.contentOffset.y > scrollView.contentSize.height - scrollView.bounds.height
    if closeToEnd {
      fetchNextPage()
    }
  }
}
