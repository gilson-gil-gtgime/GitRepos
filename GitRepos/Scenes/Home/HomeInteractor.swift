//
//  HomeInteractor.swift
//  GitRepos
//
//  Created by Gilson Gil on 23/03/19.
//  Copyright (c) 2019 Gilson Gil. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeBusinessLogic {
  func fetchNextPage(request: Home.FetchRepositories.Request)
}

protocol HomeDataStore {
  var repositories: [Repository] { get set }
}

final class HomeInteractor: HomeBusinessLogic, HomeDataStore {
  var presenter: HomePresentationLogic?
  lazy var worker: HomeWorker? = { HomeWorker() }()
  var currentPage: Int?
  var isLoading = false
  var hasReachedEnd = false
  var repositories: [Repository] = []

  // MARK: - Fetch Next Page

  func fetchNextPage(request: Home.FetchRepositories.Request) {
    guard !isLoading else { return }
    guard !hasReachedEnd else { return }
    isLoading = true
    let nextPage = (currentPage ?? -1) + 1
    worker?.fetch(page: nextPage) { [weak self] callback in
      guard let self = self else { return }
      do {
        let repositories = try callback()
        self.repositories.append(contentsOf: repositories)
        let response = Home.FetchRepositories.Response(repositories: self.repositories)
        self.presenter?.presentRepositories(response: response)
      } catch APIError.endReached {
        self.hasReachedEnd = true
      } catch {
        let response = Home.DisplayError.Response(error: error)
        self.presenter?.presentError(response: response)
      }
      self.isLoading = false
    }
  }
}
